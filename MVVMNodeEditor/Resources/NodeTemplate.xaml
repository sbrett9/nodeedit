<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:command="http://www.galasoft.ch/mvvmlight"
                    xmlns:controls="clr-namespace:MVVMNodeEditor.Controls"
                    xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
                    xmlns:utility="clr-namespace:MVVMNodeEditor.Utility"
                    xmlns:viewModel="clr-namespace:MVVMNodeEditor.ViewModel">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/Resources/Common.xaml" />
        <ResourceDictionary Source="pack://application:,,,/Resources/Brushes.xaml" />
        <ResourceDictionary Source="pack://application:,,,/Resources/Converters.xaml" />
        <ResourceDictionary>

            <ControlTemplate x:Key="nodeItemControlTemplate" TargetType="{x:Type ListBoxItem}">
                <Grid>
                    <Border x:Name="selectionBorder"
                            Margin="{TemplateBinding Margin}"
                            Padding="{TemplateBinding Padding}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="2">
                        <ContentPresenter />
                    </Border>
                </Grid>
                <ControlTemplate.Triggers>
                    <Trigger Property="IsSelected" Value="True">
                        <Setter TargetName="selectionBorder" Property="BorderBrush" Value="Transparent" />
                        <Setter TargetName="selectionBorder" Property="Background" Value="Transparent" />
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>

            <Style x:Key="nodeStyleBase" TargetType="{x:Type ListBoxItem}">
                <!--  Set defaults for background and border.  -->
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="BorderBrush" Value="Transparent" />
                <Setter Property="BorderThickness" Value="1" />
                <!--  Set the position of the node within the canvas.  -->
                <Setter Property="Canvas.Left" Value="{Binding Path=X, Mode=TwoWay}" />
                <Setter Property="Canvas.Top" Value="{Binding Path=Y, Mode=TwoWay}" />
                <!--  Set the z-order of the node within the canvas.  -->
                <Setter Property="Canvas.ZIndex" Value="{Binding Path=ZIndex, Mode=TwoWay}" />
                <Setter Property="Template" Value="{StaticResource nodeItemControlTemplate}" />
                <Setter Property="IsSelected" Value="{Binding Path=IsSelected}" />
                <Setter Property="ClipToBounds" Value="True"/>
            </Style>


        </ResourceDictionary>
    </ResourceDictionary.MergedDictionaries>

    <DataTemplate DataType="{x:Type viewModel:NodeViewModel}">
        <Grid x:Name="xgrid" ClipToBounds="True">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>

            <!--
                This canvas contains the entirety of the node. The node is made to look like a chevron, pointing right.
                The node is actually a rectangular box made up of 3 parts, the head, the body and the tail.
                The body is what could be described as the classic chevron.
                The tail and the head are the stenciled areas left behind.
            -->
            <ContentPresenter x:Name="operationContent" Grid.Row="1" Content="{Binding Path=OperationModel, FallbackValue={x:Null}}" />
            <Canvas x:Name="chevgrid" Grid.Row="0" MinWidth="180" MinHeight="60" Width="{Binding Path=ActualWidth, ElementName=xgrid}">

                <!--  This section describes the node's chevron body.  -->
                <controls:Body Grid.Column="0" Canvas.Left="0" Canvas.Top="0"
                               MinWidth="180" MinHeight="60"
                               Width="{Binding Path=ActualWidth, ElementName=operationContent, UpdateSourceTrigger=PropertyChanged, PresentationTraceSources.TraceLevel=High}"
                               Fill="{StaticResource nodeFillBrush}"
                               BindableActualHeight="{Binding Path=Height, Mode=OneWayToSource, UpdateSourceTrigger=PropertyChanged}"
                               BindableActualWidth="{Binding Path=Width, Mode=OneWayToSource, UpdateSourceTrigger=PropertyChanged}"
                               ChevAngle="{Binding Source={StaticResource ChevAngle}}"
                               Focusable="False" />
                <!--<ContentControl x:Name="body"
                                Grid.Column="0" Canvas.Left="0" Canvas.Top="0"
                                MinWidth="180" MinHeight="60"
                                HorizontalAlignment="Stretch"
                                Focusable="False">
                    <ContentControl.ContentTemplate>
                        <DataTemplate>
                            <Canvas x:Name="chevCanvas" Background="Transparent">
                                <Canvas.Resources>
                                    <RectangleGeometry x:Key="chevBody">
                                        <RectangleGeometry.Rect>
                                            <MultiBinding Converter="{StaticResource RectConverter}">
                                                <Binding Path="ActualWidth" RelativeSource="{RelativeSource AncestorType={x:Type Canvas}}" />
                                                <Binding Path="ActualHeight" RelativeSource="{RelativeSource AncestorType={x:Type Canvas}}" />
                                            </MultiBinding>
                                        </RectangleGeometry.Rect>
                                    </RectangleGeometry>

                                    <PathGeometry x:Key="chevHeadGeometry" Figures="{utility:MultiBinder {Binding Source={StaticResource ChevAngle}}, {Binding Path=ActualWidth, RelativeSource={RelativeSource AncestorType={x:Type Canvas}}}, {Binding Path=ActualHeight, RelativeSource={RelativeSource AncestorType={x:Type Canvas}}}, {StaticResource ChevBodyConverter}}" />

                                    <PathGeometry x:Key="chevTailGeometry" Figures="{utility:MultiBinder {Binding Source={StaticResource ChevAngle}}, {Binding Path=ActualWidth, RelativeSource={RelativeSource AncestorType={x:Type Canvas}}}, {Binding Path=ActualHeight, RelativeSource={RelativeSource AncestorType={x:Type Canvas}}}, {StaticResource ChevTailConverter}}" />
                                </Canvas.Resources>
                                <Path Fill="{StaticResource nodeFillBrush}">
                                    <Path.Data>
                                        <CombinedGeometry Geometry1="{StaticResource chevBody}" GeometryCombineMode="Exclude">
                                            <CombinedGeometry.Geometry2>
                                                <CombinedGeometry Geometry1="{DynamicResource chevHeadGeometry}" Geometry2="{DynamicResource chevTailGeometry}" GeometryCombineMode="Union" />
                                            </CombinedGeometry.Geometry2>
                                        </CombinedGeometry>
                                    </Path.Data>
                                </Path>
                            </Canvas>
                        </DataTemplate>
                    </ContentControl.ContentTemplate>
                </ContentControl>-->
                <controls:Tail x:Name="tail"
                               Grid.Column="0" Canvas.Left="0" Canvas.Top="0"
                               Fill="{utility:MultiBinder {Binding Path=Highlighted,
                                                                   UpdateSourceTrigger=PropertyChanged},
                                                          {Binding Source={x:Static Brushes.Transparent}},
                                                          {Binding Source={x:Static Brushes.LawnGreen}},
                                                          {StaticResource BooleanToHighlightConverter}}"
                               BindableActualHeight="{Binding Path=Height, Mode=OneWayToSource, UpdateSourceTrigger=PropertyChanged}"
                               BindableActualWidth="{Binding Path=Width, Mode=OneWayToSource, UpdateSourceTrigger=PropertyChanged}"
                               ChevAngle="{Binding Source={StaticResource ChevAngle}}"
                               ChevHeight="{Binding Path=ActualHeight, ElementName=chevgrid, UpdateSourceTrigger=PropertyChanged}"
                               ChevWidth="{Binding Path=ActualWidth, ElementName=chevgrid, UpdateSourceTrigger=PropertyChanged}"
                               DataContext="{Binding Path=LeftEdgeViewModel}"
                               Visibility="Visible">
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="Loaded">
                            <command:EventToCommand Command="{Binding Path=VisualLoadedCommand, UpdateSourceTrigger=PropertyChanged}" CommandParameter="{Binding ElementName=tail}" />
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                </controls:Tail>

                <controls:Head x:Name="head"
                               Grid.Column="0"
                               Canvas.Left="{utility:MultiBinder {Binding Source={StaticResource ChevAngle}},
                                                                 {Binding Path=ActualWidth,
                                                                          ElementName=chevgrid},
                                                                 {Binding Path=ActualHeight,
                                                                          ElementName=chevgrid},
                                                                 {StaticResource ChevHeadXPosConverter}}"
                               Fill="{utility:MultiBinder {Binding Path=Highlighted,
                                                                   UpdateSourceTrigger=PropertyChanged},
                                                          {Binding Source={x:Static Brushes.Transparent}},
                                                          {Binding Source={x:Static Brushes.LawnGreen}},
                                                          {StaticResource BooleanToHighlightConverter}}"
                               BindableActualHeight="{Binding Path=Height, Mode=OneWayToSource, UpdateSourceTrigger=PropertyChanged}"
                               BindableActualWidth="{Binding Path=Width, Mode=OneWayToSource, UpdateSourceTrigger=PropertyChanged}"
                               ChevAngle="{Binding Source={StaticResource ChevAngle}}"
                               ChevHeight="{Binding Path=ActualHeight, ElementName=chevgrid, UpdateSourceTrigger=PropertyChanged}"
                               ChevWidth="{Binding Path=ActualWidth, ElementName=chevgrid, UpdateSourceTrigger=PropertyChanged}"
                               DataContext="{Binding Path=RightEdgeViewModel}"
                               Visibility="Visible">
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="Loaded">
                            <command:EventToCommand Command="{Binding Path=VisualLoadedCommand, UpdateSourceTrigger=PropertyChanged}" CommandParameter="{Binding ElementName=tail}" />
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                </controls:Head>
            </Canvas>

            <i:Interaction.Triggers>
                <i:EventTrigger EventName="Loaded">
                    <command:EventToCommand Command="{Binding Path=VisualLoadedCommand, UpdateSourceTrigger=PropertyChanged}" CommandParameter="{Binding ElementName=xgrid}" />
                </i:EventTrigger>
                <i:EventTrigger EventName="LayoutUpdated">
                    <command:EventToCommand Command="{Binding Path=VisualUpdatedCommand, UpdateSourceTrigger=PropertyChanged}"/>
                </i:EventTrigger>
                <i:EventTrigger EventName="MouseLeftButtonDown">
                    <command:EventToCommand Command="{Binding Path=DragStartedCommand, UpdateSourceTrigger=PropertyChanged}" PassEventArgsToCommand="True" />
                </i:EventTrigger>
                <i:EventTrigger EventName="MouseMove">
                    <command:EventToCommand Command="{Binding Path=DraggingCommand, UpdateSourceTrigger=PropertyChanged}" PassEventArgsToCommand="True" />
                </i:EventTrigger>
                <i:EventTrigger EventName="MouseLeftButtonUp">
                    <command:EventToCommand Command="{Binding Path=DragCompletedCommand, UpdateSourceTrigger=PropertyChanged}" PassEventArgsToCommand="True" />
                </i:EventTrigger>
            </i:Interaction.Triggers>
        </Grid>
    </DataTemplate>



</ResourceDictionary>