<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:behaviors="clr-namespace:MVVMNodeEditor.Behaviors"
                    xmlns:command="http://www.galasoft.ch/mvvmlight"
                    xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
                    xmlns:viewModel="clr-namespace:MVVMNodeEditor.ViewModel"
                    xmlns:scg="clr-namespace:System.Collections.ObjectModel;assembly=System"
                    xmlns:interfaces="clr-namespace:Interfaces;assembly=Interfaces"
                    xmlns:controls="clr-namespace:MVVMNodeEditor.Controls" >
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/Resources/Common.xaml" />
        <ResourceDictionary Source="pack://application:,,,/Resources/Brushes.xaml" />
        <ResourceDictionary Source="pack://application:,,,/Resources/Converters.xaml" />
        <ResourceDictionary Source="pack://application:,,,/Resources/NodeTemplate.xaml" />
        <ResourceDictionary>

            <!--  Override the style of the ListBox to remove the ScrollViewer. All we want is ListBox logic but based on a Canvas.  -->
            <Style x:Key="noScrollViewerListBoxStyle" TargetType="ListBox">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="ListBox">
                            <!--  The ListBoxItems are presented in a Canvas. 'IsItemsHost' is set to 'True' so that the ListBox uses the Canvas as the container for its items.  -->
                            <Canvas IsItemsHost="True" />
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>



            <!--  Default style and visual template for 'NetworkView'.  -->
            <Style x:Key="networkViewStyle" TargetType="{x:Type Control}">
                <!--  The visual template.  -->
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Control}">
                            <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                                <Grid>
                                    <!--  Control that presents the nodes.  -->
                                    <ListBox x:Name="PART_NodeItemsControl" Background="Violet"
                                             Style="{StaticResource noScrollViewerListBoxStyle}"
                                             ClipToBounds="True"
                                             ItemContainerStyle="{StaticResource nodeStyleBase}"
                                             ItemsSource="{Binding Path=Nodes}"
                                             SelectionMode="Single"
                                             AllowDrop="True"
                                             SelectedItem="{Binding Path=SelectedNode, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
                                        <!--<i:Interaction.Behaviors>
                                            <behaviors:ListBoxSelectedItemsBehavior SelectedItems="{Binding Path=SelectedNodes, Mode=TwoWay, Converter={StaticResource SelectedNodesConverter}}" />
                                        </i:Interaction.Behaviors>-->
                                    </ListBox>

                                </Grid>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        </ResourceDictionary>
    </ResourceDictionary.MergedDictionaries>

    <DataTemplate DataType="{x:Type viewModel:NetworkViewModel}">
        <Control Style="{StaticResource networkViewStyle}"/>
    </DataTemplate>

</ResourceDictionary>