<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:controls="clr-namespace:MvvmLight13.Controls"
                    xmlns:system="clr-namespace:System;assembly=mscorlib"
                    xmlns:utility="clr-namespace:MvvmLight13.Utility"
                    xmlns:viewModel="clr-namespace:MvvmLight13.ViewModel">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/Resources/Converters.xaml" />
        <ResourceDictionary Source="pack://application:,,,/Resources/Brushes.xaml" />
        <ResourceDictionary>

            <system:Double x:Key="ChevAngle">132.5</system:Double>

            <!--  Default style and control-template for 'NodeItem'.  -->
            <Style x:Key="defaultNodeItem" TargetType="controls:Node">

                <!--  Data-bind the parent NetworkView.  -->
                <Setter Property="ParentNodeView" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:NodeView}}, Path=.}" />

                <!--  Set the position of the node within the canvas.  -->
                <Setter Property="Canvas.Left" Value="{Binding X, RelativeSource={RelativeSource Self}, Mode=TwoWay}" />
                <Setter Property="Canvas.Top" Value="{Binding Y, RelativeSource={RelativeSource Self}, Mode=TwoWay}" />

                <!--  Set the z-order of the node within the canvas.  -->
                <Setter Property="Canvas.ZIndex" Value="{Binding ZIndex, RelativeSource={RelativeSource Self}, Mode=TwoWay}" />

                <!--  Set defaults for background and border.  -->
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="BorderBrush" Value="Transparent" />
                <Setter Property="BorderThickness" Value="1" />

                <!--  The control-template for the node.  -->
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type controls:Node}">
                            <Grid>
                                <Border x:Name="selectionBorder"
                                        Margin="{TemplateBinding Margin}"
                                        Padding="{TemplateBinding Padding}"
                                        Background="{TemplateBinding Background}"
                                        BorderBrush="{TemplateBinding BorderBrush}"
                                        BorderThickness="{TemplateBinding BorderThickness}"
                                        CornerRadius="2">
                                    <ContentPresenter />
                                </Border>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsSelected" Value="True">
                                    <Setter TargetName="selectionBorder" Property="BorderBrush" Value="Transparent" />
                                    <Setter TargetName="selectionBorder" Property="Background" Value="Transparent" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>


        </ResourceDictionary>
    </ResourceDictionary.MergedDictionaries>


    <Style x:Key="tailStyle" TargetType="{x:Type controls:Edge}">
        <!--  Data-binding for the connector hotspot. ConnectorItem automatically computes its center points and assings this value to the 'Hotspot' property.  This data-binding then 'pushes' the value into the application view-model.  -->
        <Setter Property="Hotspot" Value="{Binding Path=Hotspot, Mode=OneWayToSource}" />

        <!--  The visual template.  -->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:Edge}">
                    <!--  The visual for the connector.  -->
                    <Ellipse Fill="{StaticResource connectorBackgroundBrush}" Stroke="{StaticResource nodeBorderBrush}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="headStyle" TargetType="{x:Type controls:Edge}">
        <!--  Data-binding for the connector hotspot. ConnectorItem automatically computes its center points and assings this value to the 'Hotspot' property.  This data-binding then 'pushes' the value into the application view-model.  -->
        <Setter Property="Hotspot" Value="{Binding Path=Hotspot, Mode=OneWayToSource}" />

        <!--  The visual template.  -->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:Edge}">
                    <!--  The visual for the connector.  -->
                    <Ellipse Fill="{StaticResource connectorBackgroundBrush}" Stroke="{StaticResource nodeBorderBrush}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  Define a style for 'NodeItem'. Binds 'X' and 'Y' in the view-model (the 'NodeViewModel' class) to 'X' and 'Y' in the NodeItem class. This sets the position of the node within the Canvas.  -->
    <Style BasedOn="{StaticResource defaultNodeItem}" TargetType="{x:Type controls:Node}">
        <Setter Property="X" Value="{Binding Path=X}" />
        <Setter Property="Y" Value="{Binding Path=Y}" />
        <Setter Property="ZIndex" Value="{Binding Path=ZIndex}" />
        <Setter Property="IsSelected" Value="{Binding Path=IsSelected}" />
    </Style>


    <!--  Override the style of the ListBox to remove the ScrollViewer. All we want is ListBox logic but based on a Canvas.  -->
    <Style x:Key="noScrollViewerListBoxStyle" TargetType="ListBox">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBox">
                    <!--  The ListBoxItems are presented in a Canvas. 'IsItemsHost' is set to 'True' so that the ListBox uses the Canvas as the container for its items.  -->
                    <Canvas IsItemsHost="True" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  Default style and visual template for 'NetworkView'.  -->
    <Style TargetType="{x:Type controls:NodeView}">

        <!--  The visual template.  -->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:NodeView}">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid>

                            <!--  Control that presents the nodes.  -->
                            <controls:NodesControl x:Name="PART_NodeItemsControl"
                                                   Style="{StaticResource noScrollViewerListBoxStyle}"
                                                   ClipToBounds="True"
                                                   ItemContainerStyle="{TemplateBinding NodeItemContainerStyle}"
                                                   ItemTemplate="{TemplateBinding NodeItemTemplate}"
                                                   ItemTemplateSelector="{TemplateBinding NodeItemTemplateSelector}"
                                                   ItemsSource="{TemplateBinding Nodes}"
                                                   SelectionMode="Extended" />

                            <!--  Control that presents the connections between nodes.  -->
                            <ItemsControl x:Name="PART_ConnectionItemsControl"
                                          ClipToBounds="True"
                                          ItemContainerStyle="{TemplateBinding ConnectionItemContainerStyle}"
                                          ItemTemplate="{TemplateBinding ConnectionItemTemplate}"
                                          ItemTemplateSelector="{TemplateBinding ConnectionItemTemplateSelector}"
                                          ItemsSource="{TemplateBinding Connections}">
                                <ItemsControl.ItemsPanel>
                                    <ItemsPanelTemplate>
                                        <!--  Connections are presented in a Canvas.  -->
                                        <Canvas />
                                    </ItemsPanelTemplate>
                                </ItemsControl.ItemsPanel>
                            </ItemsControl>

                            <!--
                                This Canvas and Border are used as a very simple way to render a drag selection rectangle.
                            -->
                            <Canvas x:Name="PART_DragSelectionCanvas" ClipToBounds="True" Visibility="Collapsed">
                                <Border x:Name="PART_DragSelectionBorder"
                                        Background="LightBlue" BorderBrush="Blue" BorderThickness="1"
                                        Opacity="0.5"
                                        CornerRadius="1" />
                            </Canvas>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!--  A data-template that defines the UI for input connectors.  -->
    <DataTemplate x:Key="LeftEdgeTemplate">
        <Grid>
            <!--  The 'ConnectorItem' or anchor point for the connector.  -->
            <controls:Edge Width="15" Height="15" Style="{StaticResource tailStyle}" Cursor="Hand" />
        </Grid>
    </DataTemplate>

    <!--  A data-template that defines the UI for output connectors.  -->
    <DataTemplate x:Key="RightEdgeTemplate">
        <Grid>
            <controls:Edge Width="15" Height="15" Style="{StaticResource headStyle}" Cursor="Hand" />
        </Grid>
    </DataTemplate>


    <DataTemplate x:Key="chevTemplate">
        <Canvas x:Name="chevCanvas" Background="Transparent">
            <Canvas.Resources>
                <RectangleGeometry x:Key="chevBody">
                    <RectangleGeometry.Rect>
                        <MultiBinding Converter="{StaticResource RectConverter}">
                            <Binding Path="ActualWidth" RelativeSource="{RelativeSource AncestorType={x:Type Canvas}}" />
                            <Binding Path="ActualHeight" RelativeSource="{RelativeSource AncestorType={x:Type Canvas}}" />
                        </MultiBinding>
                    </RectangleGeometry.Rect>
                </RectangleGeometry>

                <PathGeometry x:Key="chevHeadGeometry" Figures="{utility:MultiBinder {Binding Source={StaticResource ChevAngle}}, {Binding Path=ActualWidth, RelativeSource={RelativeSource AncestorType={x:Type Canvas}}}, {Binding Path=ActualHeight, RelativeSource={RelativeSource AncestorType={x:Type Canvas}}}, {StaticResource ChevBodyConverter}}" />

                <PathGeometry x:Key="chevTailGeometry" Figures="{utility:MultiBinder {Binding Source={StaticResource ChevAngle}}, {Binding Path=ActualWidth, RelativeSource={RelativeSource AncestorType={x:Type Canvas}}}, {Binding Path=ActualHeight, RelativeSource={RelativeSource AncestorType={x:Type Canvas}}}, {StaticResource ChevTailConverter}}" />
            </Canvas.Resources>
            <Path Fill="{StaticResource nodeFillBrush}">
                <Path.Data>
                    <CombinedGeometry Geometry1="{StaticResource chevBody}" GeometryCombineMode="Exclude">
                        <CombinedGeometry.Geometry2>
                            <CombinedGeometry Geometry1="{DynamicResource chevHeadGeometry}" Geometry2="{DynamicResource chevTailGeometry}" GeometryCombineMode="Union" />
                        </CombinedGeometry.Geometry2>
                    </CombinedGeometry>
                </Path.Data>
            </Path>
        </Canvas>
    </DataTemplate>

    <DataTemplate x:Key="chevTailTemplate">
        <Canvas x:Name="chevCanvas" Background="Transparent" Visibility="{Binding Path=Highlighted, Converter={StaticResource BooleanToVisibilityConverter}}">
            <Canvas.Resources>
                <RectangleGeometry x:Key="chevBody">
                    <RectangleGeometry.Rect>
                        <MultiBinding Converter="{StaticResource RectConverter}">
                            <Binding Path="ActualWidth" RelativeSource="{RelativeSource AncestorType={x:Type Canvas}}" />
                            <Binding Path="ActualHeight" RelativeSource="{RelativeSource AncestorType={x:Type Canvas}}" />
                        </MultiBinding>
                    </RectangleGeometry.Rect>
                </RectangleGeometry>
                <PathGeometry x:Key="chevTailGeometry" Figures="{utility:MultiBinder {Binding Source={StaticResource ChevAngle}}, {Binding Path=ActualWidth, RelativeSource={RelativeSource AncestorType={x:Type Canvas}}}, {Binding Path=ActualHeight, RelativeSource={RelativeSource AncestorType={x:Type Canvas}}}, {StaticResource ChevTailConverter}}" />
            </Canvas.Resources>
            <Path Fill="LawnGreen" Stroke="Transparent">
                <Path.Data>
                    <CombinedGeometry Geometry1="{StaticResource chevBody}" GeometryCombineMode="Intersect">
                        <CombinedGeometry.Geometry2>
                            <CombinedGeometry Geometry1="{DynamicResource chevTailGeometry}" />
                        </CombinedGeometry.Geometry2>
                    </CombinedGeometry>
                </Path.Data>
            </Path>
            <Canvas.Effect>
                <DropShadowEffect Opacity="0.2"
                                  BlurRadius="3" Direction="0" ShadowDepth="3"
                                  Color="White" />
            </Canvas.Effect>
        </Canvas>
    </DataTemplate>

    <DataTemplate x:Key="chevHeadTemplate">
        <Canvas x:Name="chevCanvas" Background="Transparent" Visibility="{Binding Path=Highlighted, Mode=TwoWay, Converter={StaticResource BooleanToVisibilityConverter}}">
            <Canvas.Resources>
                <RectangleGeometry x:Key="chevBody">
                    <RectangleGeometry.Rect>
                        <MultiBinding Converter="{StaticResource RectConverter}">
                            <Binding Path="ActualWidth" RelativeSource="{RelativeSource AncestorType={x:Type Canvas}}" />
                            <Binding Path="ActualHeight" RelativeSource="{RelativeSource AncestorType={x:Type Canvas}}" />
                        </MultiBinding>
                    </RectangleGeometry.Rect>
                </RectangleGeometry>
                <PathGeometry x:Key="chevHeadGeometry" Figures="{utility:MultiBinder {Binding Source={StaticResource ChevAngle}}, {Binding Path=ActualWidth, RelativeSource={RelativeSource AncestorType={x:Type Canvas}}}, {Binding Path=ActualHeight, RelativeSource={RelativeSource AncestorType={x:Type Canvas}}}, {StaticResource ChevHeadConverter}}" />
            </Canvas.Resources>
            <Path Fill="LawnGreen" Stroke="Transparent">
                <Path.Data>
                    <CombinedGeometry Geometry1="{StaticResource chevBody}" GeometryCombineMode="Intersect">
                        <CombinedGeometry.Geometry2>
                            <CombinedGeometry Geometry1="{DynamicResource chevHeadGeometry}" />
                        </CombinedGeometry.Geometry2>
                    </CombinedGeometry>
                </Path.Data>
            </Path>
            <Canvas.Effect>
                <DropShadowEffect Opacity="0.2"
                                  BlurRadius="3" Direction="180" ShadowDepth="3"
                                  Color="White" />
            </Canvas.Effect>
        </Canvas>
    </DataTemplate>




    <!--  Define a data-template for the 'NodeViewModel' class.  -->
    <DataTemplate DataType="{x:Type viewModel:NodeViewModel}">
        <!--  The margin has been selected so that the selection rect nicely covers the entire node.  -->
        <Grid x:Name="xgrid">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition />
            </Grid.RowDefinitions>
            <Canvas x:Name="chevgrid" Grid.Row="0" MinWidth="180" MinHeight="60">
                <ContentControl x:Name="body"
                                Grid.Column="0" Canvas.Left="0" Canvas.Top="0"
                                MinWidth="180" MinHeight="60"
                                HorizontalAlignment="Stretch"
                                ContentTemplate="{StaticResource chevTemplate}"
                                Focusable="False" />
                <controls:Tail x:Name="tail"
                               Grid.Column="0" Canvas.Left="0" Canvas.Top="0"
                               Fill="{utility:MultiBinder {Binding Path=Highlighted,
                                                                   UpdateSourceTrigger=PropertyChanged},
                                                          {Binding Source={x:Static Brushes.Transparent}},
                                                          {Binding Source={x:Static Brushes.LawnGreen}},
                                                          {StaticResource BooleanToHighlightConverter}}"
                               BindableActualHeight="{Binding Path=Height, Mode=OneWayToSource, UpdateSourceTrigger=PropertyChanged}"
                               BindableActualWidth="{Binding Path=Width, Mode=OneWayToSource, UpdateSourceTrigger=PropertyChanged}"
                               ChevAngle="{Binding Source={StaticResource ChevAngle}}"
                               ChevHeight="{Binding Path=ActualHeight, ElementName=chevgrid}"
                               ChevWidth="{Binding Path=ActualWidth, ElementName=chevgrid}"
                               DataContext="{Binding Path=Left}"
                               Visibility="Visible" />

                <controls:Head x:Name="head"
                               Grid.Column="0"
                               Canvas.Left="{utility:MultiBinder {Binding Source={StaticResource ChevAngle}},
                                                                 {Binding Path=ActualWidth,
                                                                          ElementName=chevgrid},
                                                                 {Binding Path=ActualHeight,
                                                                          ElementName=chevgrid},
                                                                 {StaticResource ChevHeadXPosConverter}}"
                               Fill="{utility:MultiBinder {Binding Path=Highlighted,
                                                                   UpdateSourceTrigger=PropertyChanged},
                                                          {Binding Source={x:Static Brushes.Transparent}},
                                                          {Binding Source={x:Static Brushes.LawnGreen}},
                                                          {StaticResource BooleanToHighlightConverter}}"
                               BindableActualHeight="{Binding Path=Height, Mode=OneWayToSource, UpdateSourceTrigger=PropertyChanged}"
                               BindableActualWidth="{Binding Path=Width, Mode=OneWayToSource, UpdateSourceTrigger=PropertyChanged}"
                               ChevAngle="{Binding Source={StaticResource ChevAngle}}"
                               ChevHeight="{Binding Path=ActualHeight, ElementName=chevgrid}"
                               ChevWidth="{Binding Path=ActualWidth, ElementName=chevgrid}"
                               DataContext="{Binding Path=Right}"
                               Visibility="Visible" />

            </Canvas>
            <Grid x:Name="dataContentGrid"
                  Grid.Row="1"
                  MinHeight="120"
                  Margin="15,0,15,5"
                  Background="White"
                  Focusable="False">
                <Border BorderBrush="Black" BorderThickness="2,1,2,2" />
            </Grid>
        </Grid>
    </DataTemplate>
</ResourceDictionary>